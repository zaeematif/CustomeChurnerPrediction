# -*- coding: utf-8 -*-
"""CustomerChurnPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oGYvQYVKx6B3oR9R4WwBVkSzhHW5nKHa
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
from matplotlib import pyplot as plt
import numpy as np
# %matplotlib inline

df = pd.read_csv('/content/customer_churned.csv')
df.sample(5)

#drop customer ID as it is useless
df.drop('customerID', axis='columns', inplace=True)
df.dtypes

#TotalCharges is an object, convert it to float
df.TotalCharges.values

#conversion
#pd.to_numeric(df.TotalCharges)

#some columns have blank values
df[pd.to_numeric(df.TotalCharges, errors='coerce').isnull()]

#drop these columns
df1 = df[df.TotalCharges != ' ']
df1.shape

#now convert the TotalCharges
df1.TotalCharges = pd.to_numeric(df1.TotalCharges)

df1.TotalCharges.dtypes

#All the customer's Tenure who didn't left the service
tenure_churn_no = df1[df1.Churn == 'No'].tenure

#All the customer's Tenure who left the service
tenure_churn_yes = df1[df1.Churn == 'Yes'].tenure

plt.xlabel('Tenure')
plt.ylabel('Number of Customers')
plt.title('Customer Churn Prediction Visualisation')

plt.hist([tenure_churn_yes, tenure_churn_no], color=['green', 'red'], label=['Churn=Yes', 'Churn=No'] )
plt.legend()

#All the customer's MC who didn't left the service
mc_churn_no = df1[df1.Churn == 'No'].MonthlyCharges

#All the customer's MC who left the service
mc_churn_yes = df1[df1.Churn == 'Yes'].MonthlyCharges

plt.xlabel('Monthly Charges')
plt.ylabel('Number of Customers')
plt.title('Customer Churn Prediction Visualisation')

plt.hist([mc_churn_yes, mc_churn_no], color=['green', 'red'], label=['Churn=Yes', 'Churn=No'] )
plt.legend()

#DATA CLEANING

def print_unique_col_values(df):
  for column in df:
    if df[column].dtypes == 'object':
      print(f'{column}:  {df[column].unique()}')

print_unique_col_values(df1)

df1.replace('No internet service', 'No', inplace=True)
df1.replace('No phone service', 'No', inplace=True)

print_unique_col_values(df1)

yes_no_columns = ['Partner', 'Dependents', 'PhoneService', 'MultipleLines', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',
                  'TechSupport', 'StreamingTV', 'StreamingMovies', 'PaperlessBilling', 'Churn']

for col in yes_no_columns:
  df1[col].replace({'Yes': 1, 'No': 0}, inplace = True)

for col in df1:
  print(f'{col}: {df1[col].unique()}')

df1['gender'].replace({'Female': 1, 'Male':0}, inplace = True)

df1['gender'].unique()

#for making InternetSe
df2 = pd.get_dummies(data=df1, columns=['InternetService', 'Contract', 'PaymentMethod'])
df2.columns

df2.sample(4)

df2.dtypes

#scaling all the left columns which have 1> value
cols_to_scale = ['tenure', 'MonthlyCharges', 'TotalCharges']

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()

#scaling all the columns
df2[cols_to_scale] = scaler.fit_transform(df2[cols_to_scale])

df2.sample(3)

"""DATA CLEANING IS DONE

"""

#SPLIT INTO 
X = df2.drop('Churn', axis='columns')
y = df2['Churn']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=5)

X_train.shape

X_test.shape

"""CREATING THE ANN MODEL

"""

import tensorflow as tf
from tensorflow import keras

model = keras.Sequential([
     keras.layers.Dense(20, input_shape=(26,), activation="relu"),
     keras.layers.Dense(1, activation="sigmoid")
])

model.summary()

#compiling the model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

#training the model
model.fit(X_train, y_train, epochs=50, shuffle=True)

model.evaluate(X_test, y_test)

yp = model.predict(X_test)
yp[:5]

y_test[:5]

y_pred = []
for element in yp:
  if element > 0.5:
    y_pred.append(1)
  else:
    y_pred.append(0)

y_pred[:5]

#NOW CHECK THE ANSWER
y_test[:10]

y_pred[:10]

#PRINT CLASSIFICATION REPORT
 from sklearn.metrics import confusion_matrix, classification_report

 print(classification_report(y_test, y_pred))

#Confusion Matrix
import seaborn as sn 
cm = tf.math.confusion_matrix(labels=y_test, predictions=y_pred)

plt.figure(figsize = (10, 7))
sn.heatmap(cm, annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')

print("Accuracy: ", round((895+219)/(895+219+189+104), 2))